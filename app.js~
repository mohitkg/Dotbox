var express = require('express')
  , app = express()
  , http = require('http')
  , server = http.createServer(app)
  , io = require('socket.io').listen(server);
var i = 0;
var turn = 0;
server.listen(8080);

// routing
app.get('/', function (req, res) {
  res.sendfile(__dirname + '/');
});
app.use('/', express.static(__dirname + "/"));							// for images
// usernames which are currently connected to the chat
var usernames = {};
var master = 0;
var m_server, n_server, p_server;
var current_player_number = 0;
io.sockets.on('connection', function (socket) {							//connection

  // when the client emits 'sendchat', this listens and executes
  socket.on('sendchat', function (data) {
    // we tell the client to execute 'updatechat' with 2 parameters
	i = i + 1;
    io.sockets.emit('updatechat', socket.username, i);
  });

  // when the client emits 'adduser', this listens and executes
 socket.on('vacancy', function(){
	if(master == 0)
		io.sockets.emit('overload', 0); 
	else if (current_player < p_server )
		io.sockets.emit('overload', 0);
	else
		io.sockets.emit('overload', 1);
});
 
 socket.on('adduser', function(username){							//adduser, function(username)
    // we store the username in the socket session for this client
    socket.username = username;
    // add the client's username to the global list
    usernames[username] = username;
	if(master == 0){
		io.sockets.emit('inputmn');
		master = 1;
	}
	else{
		io.sockets.emit('maketable', m_server, n_server, p_server, current_player_number);
		current_player_number = current_player_number + 1;
	}		 
//   work = io.socket.emit('yeahitwork',username);
//	work = prompt('its working??');
    // echo to client they've connected
//    socket.emit('updatechat', 'SERVER', 'you have connected');
    // echo globally (all clients) that a person has connected
//    socket.broadcast.emit('updatechat', 'SERVER', username + ' has connected');
    // update the list of users in chat, client-side
//    io.sockets.emit('updateusers', usernames);
  });
  socket.on('valuemnp', function(m,n,p){
	m_server = m;
	n_server = n;
	p_server = p;
	io.sockets.emit('maketable', m_server, n_server, p_server, current_player_number);
	current_player_number = current_player_number + 1;
  });
 
 socket.on('askforhmove', function(x,y,player_number){
	io.sockets.emit('orderhmove', x, y, player_number)
		//
});
 socket.on('askforvmove', function(x,y,player_number){
	io.sockets.emit('ordervmove', x, y, player_number)
		//
});
  // when the user disconnects.. perform this
  socket.on('disconnect', function(){								//disconnect function()
    // remove the username from global usernames list
    delete usernames[socket.username];
    // update list of users in chat, client-side
    io.sockets.emit('updateusers', usernames);									//*updateusers,*updatechat
    // echo globally that this client has left
    socket.broadcast.emit('updatechat', 'SERVER', socket.username + ' has disconnected');
  });
});
